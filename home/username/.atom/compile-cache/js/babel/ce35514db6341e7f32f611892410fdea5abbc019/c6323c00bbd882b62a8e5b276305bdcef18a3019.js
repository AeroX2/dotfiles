Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atomPackageConfigObserver = require('atom-package-config-observer');

var _atomPackageConfigObserver2 = _interopRequireDefault(_atomPackageConfigObserver);

'use babel';

var config = {
  cursorBlinkInterval: {
    description: 'Set to 0 to disable cursor blinking.',
    type: 'integer',
    'default': 800,
    minimum: 0
  }
};

var configObserver;

function activate() {
  configObserver = new _atomPackageConfigObserver2['default']('cursor-blink-interval');
  configObserver.observeGlobalConfig(updateGlobalCursorBlinkInterval);
  configObserver.observeScopedConfig(updateEditors);
}

function deactivate() {
  configObserver.dispose();
  configObserver = null;
}

function updateGlobalCursorBlinkInterval(_ref) {
  var cursorBlinkInterval = _ref.cursorBlinkInterval;

  var workspaceView = atom.views.getView(atom.workspace);
  workspaceView.classList[cursorBlinkInterval ? 'remove' : 'add']('disable-cursor-blinking');
}

function updateEditors(_ref2, editors) {
  var cursorBlinkInterval = _ref2.cursorBlinkInterval;

  process.nextTick(function actualUpdateEditors() {
    if (!cursorBlinkInterval) cursorBlinkInterval = -1 + Math.pow(2, 30);
    for (var editor of editors) {
      var editorView = atom.views.getView(editor);
      if (!editorView.component || !editorView.component.presenter) return;
      var editorPresenter = editorView.component.presenter;
      editorPresenter.stopBlinkingCursors(true);
      editorPresenter.cursorBlinkPeriod = cursorBlinkInterval;
      editorPresenter.startBlinkingCursors();
    }
  });
}

exports.config = config;
exports.activate = activate;
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phbWVzLy5hdG9tL3BhY2thZ2VzL2N1cnNvci1ibGluay1pbnRlcnZhbC9saWIvY3Vyc29yLWJsaW5rLWludGVydmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozt5Q0FDa0MsOEJBQThCOzs7O0FBRGhFLFdBQVcsQ0FBQTs7QUFHWCxJQUFJLE1BQU0sR0FBRztBQUNYLHFCQUFtQixFQUFFO0FBQ25CLGVBQVcsRUFBRSxzQ0FBc0M7QUFDbkQsUUFBSSxFQUFFLFNBQVM7QUFDZixlQUFTLEdBQUc7QUFDWixXQUFPLEVBQUUsQ0FBQztHQUNYO0NBQ0YsQ0FBQzs7QUFFRixJQUFJLGNBQWMsQ0FBQzs7QUFFbkIsU0FBUyxRQUFRLEdBQUc7QUFDbEIsZ0JBQWMsR0FBRywyQ0FBMEIsdUJBQXVCLENBQUMsQ0FBQztBQUNwRSxnQkFBYyxDQUFDLG1CQUFtQixDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDcEUsZ0JBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNuRDs7QUFFRCxTQUFTLFVBQVUsR0FBRztBQUNwQixnQkFBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3pCLGdCQUFjLEdBQUcsSUFBSSxDQUFDO0NBQ3ZCOztBQUVELFNBQVMsK0JBQStCLENBQUMsSUFBcUIsRUFBRTtNQUF0QixtQkFBbUIsR0FBcEIsSUFBcUIsQ0FBcEIsbUJBQW1COztBQUMzRCxNQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkQsZUFBYSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUM1Rjs7QUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFxQixFQUFFLE9BQU8sRUFBRTtNQUEvQixtQkFBbUIsR0FBcEIsS0FBcUIsQ0FBcEIsbUJBQW1COztBQUN6QyxTQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsbUJBQW1CLEdBQUc7QUFDOUMsUUFBRyxDQUFDLG1CQUFtQixFQUFFLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLFNBQUksSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO0FBQ3pCLFVBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLFVBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsT0FBTztBQUNwRSxVQUFJLGVBQWUsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUNyRCxxQkFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFDLHFCQUFlLENBQUMsaUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7QUFDeEQscUJBQWUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0tBQ3hDO0dBQ0YsQ0FBQyxDQUFDO0NBQ0o7O1FBRU8sTUFBTSxHQUFOLE1BQU07UUFBRSxRQUFRLEdBQVIsUUFBUTtRQUFFLFVBQVUsR0FBVixVQUFVIiwiZmlsZSI6Ii9ob21lL2phbWVzLy5hdG9tL3BhY2thZ2VzL2N1cnNvci1ibGluay1pbnRlcnZhbC9saWIvY3Vyc29yLWJsaW5rLWludGVydmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcbmltcG9ydCBQYWNrYWdlQ29uZmlnT2JzZXJ2ZXIgZnJvbSAnYXRvbS1wYWNrYWdlLWNvbmZpZy1vYnNlcnZlcidcblxudmFyIGNvbmZpZyA9IHtcbiAgY3Vyc29yQmxpbmtJbnRlcnZhbDoge1xuICAgIGRlc2NyaXB0aW9uOiAnU2V0IHRvIDAgdG8gZGlzYWJsZSBjdXJzb3IgYmxpbmtpbmcuJyxcbiAgICB0eXBlOiAnaW50ZWdlcicsXG4gICAgZGVmYXVsdDogODAwLFxuICAgIG1pbmltdW06IDBcbiAgfVxufTtcblxudmFyIGNvbmZpZ09ic2VydmVyO1xuXG5mdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgY29uZmlnT2JzZXJ2ZXIgPSBuZXcgUGFja2FnZUNvbmZpZ09ic2VydmVyKCdjdXJzb3ItYmxpbmstaW50ZXJ2YWwnKTtcbiAgY29uZmlnT2JzZXJ2ZXIub2JzZXJ2ZUdsb2JhbENvbmZpZyh1cGRhdGVHbG9iYWxDdXJzb3JCbGlua0ludGVydmFsKTtcbiAgY29uZmlnT2JzZXJ2ZXIub2JzZXJ2ZVNjb3BlZENvbmZpZyh1cGRhdGVFZGl0b3JzKTtcbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgY29uZmlnT2JzZXJ2ZXIuZGlzcG9zZSgpO1xuICBjb25maWdPYnNlcnZlciA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUdsb2JhbEN1cnNvckJsaW5rSW50ZXJ2YWwoe2N1cnNvckJsaW5rSW50ZXJ2YWx9KSB7XG4gIHZhciB3b3Jrc3BhY2VWaWV3ID0gYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKTtcbiAgd29ya3NwYWNlVmlldy5jbGFzc0xpc3RbY3Vyc29yQmxpbmtJbnRlcnZhbCA/ICdyZW1vdmUnIDogJ2FkZCddKCdkaXNhYmxlLWN1cnNvci1ibGlua2luZycpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVFZGl0b3JzKHtjdXJzb3JCbGlua0ludGVydmFsfSwgZWRpdG9ycykge1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFjdHVhbFVwZGF0ZUVkaXRvcnMoKSB7XG4gICAgaWYoIWN1cnNvckJsaW5rSW50ZXJ2YWwpIGN1cnNvckJsaW5rSW50ZXJ2YWwgPSAtMSArIE1hdGgucG93KDIsIDMwKTtcbiAgICBmb3IobGV0IGVkaXRvciBvZiBlZGl0b3JzKSB7XG4gICAgICBsZXQgZWRpdG9yVmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhlZGl0b3IpO1xuICAgICAgaWYoIWVkaXRvclZpZXcuY29tcG9uZW50IHx8ICFlZGl0b3JWaWV3LmNvbXBvbmVudC5wcmVzZW50ZXIpIHJldHVybjtcbiAgICAgIGxldCBlZGl0b3JQcmVzZW50ZXIgPSBlZGl0b3JWaWV3LmNvbXBvbmVudC5wcmVzZW50ZXI7XG4gICAgICBlZGl0b3JQcmVzZW50ZXIuc3RvcEJsaW5raW5nQ3Vyc29ycyh0cnVlKTtcbiAgICAgIGVkaXRvclByZXNlbnRlci5jdXJzb3JCbGlua1BlcmlvZCA9IGN1cnNvckJsaW5rSW50ZXJ2YWw7XG4gICAgICBlZGl0b3JQcmVzZW50ZXIuc3RhcnRCbGlua2luZ0N1cnNvcnMoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQge2NvbmZpZywgYWN0aXZhdGUsIGRlYWN0aXZhdGV9O1xuIl19