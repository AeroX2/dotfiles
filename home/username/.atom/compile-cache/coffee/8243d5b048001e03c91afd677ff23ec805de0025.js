(function() {
  describe('BottomPanel', function() {
    var BottomPanel, bottomPanel, getMessage, linter;
    BottomPanel = require('../../lib/ui/bottom-panel');
    linter = null;
    bottomPanel = null;
    beforeEach(function() {
      return waitsForPromise(function() {
        return atom.packages.activatePackage('linter').then(function() {
          linter = atom.packages.getActivePackage('linter').mainModule.instance;
          if (bottomPanel != null) {
            bottomPanel.dispose();
          }
          bottomPanel = new BottomPanel('File');
          return atom.workspace.open(__dirname + '/fixtures/file.txt');
        });
      });
    });
    getMessage = require('../common').getMessage;
    it('is not visible when there are no errors', function() {
      return expect(linter.views.bottomPanel.getVisibility()).toBe(false);
    });
    it('hides on config change', function() {
      linter.views.bottomPanel.scope = 'Project';
      linter.views.bottomPanel.setMessages({
        added: [getMessage('Error')],
        removed: []
      });
      expect(linter.views.bottomPanel.getVisibility()).toBe(true);
      atom.config.set('linter.showErrorPanel', false);
      expect(linter.views.bottomPanel.getVisibility()).toBe(false);
      atom.config.set('linter.showErrorPanel', true);
      return expect(linter.views.bottomPanel.getVisibility()).toBe(true);
    });
    return describe('{set, remove}Messages', function() {
      return it('works as expected', function() {
        var messages;
        bottomPanel.scope = 'Project';
        messages = [getMessage('Error'), getMessage('Warning')];
        bottomPanel.setMessages({
          added: messages,
          removed: []
        });
        expect(bottomPanel.messagesElement.childNodes.length).toBe(1);
        expect(bottomPanel.messagesElement.childNodes[0].childNodes.length).toBe(2);
        bottomPanel.setMessages({
          added: [],
          removed: messages
        });
        expect(bottomPanel.messagesElement.childNodes.length).toBe(1);
        expect(bottomPanel.messagesElement.childNodes[0].childNodes.length).toBe(0);
        bottomPanel.setMessages({
          added: messages,
          removed: []
        });
        expect(bottomPanel.messagesElement.childNodes[0].childNodes.length).toBe(2);
        bottomPanel.removeMessages(messages);
        expect(bottomPanel.messagesElement.childNodes.length).toBe(1);
        return expect(bottomPanel.messagesElement.childNodes[0].childNodes.length).toBe(0);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvamFtZXMvLmF0b20vcGFja2FnZXMvbGludGVyL3NwZWMvdWkvYm90dG9tLXBhbmVsLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsUUFBQSxDQUFTLGFBQVQsRUFBd0IsU0FBQTtBQUN0QixRQUFBO0lBQUEsV0FBQSxHQUFjLE9BQUEsQ0FBUSwyQkFBUjtJQUNkLE1BQUEsR0FBUztJQUNULFdBQUEsR0FBYztJQUNkLFVBQUEsQ0FBVyxTQUFBO2FBQ1QsZUFBQSxDQUFnQixTQUFBO2VBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFkLENBQThCLFFBQTlCLENBQXVDLENBQUMsSUFBeEMsQ0FBNkMsU0FBQTtVQUMzQyxNQUFBLEdBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZCxDQUErQixRQUEvQixDQUF3QyxDQUFDLFVBQVUsQ0FBQzs7WUFDN0QsV0FBVyxDQUFFLE9BQWIsQ0FBQTs7VUFDQSxXQUFBLEdBQWtCLElBQUEsV0FBQSxDQUFZLE1BQVo7aUJBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBZixDQUFvQixTQUFBLEdBQVksb0JBQWhDO1FBSjJDLENBQTdDO01BRGMsQ0FBaEI7SUFEUyxDQUFYO0lBUUMsYUFBYyxPQUFBLENBQVEsV0FBUjtJQUVmLEVBQUEsQ0FBRyx5Q0FBSCxFQUE4QyxTQUFBO2FBQzVDLE1BQUEsQ0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUF6QixDQUFBLENBQVAsQ0FBZ0QsQ0FBQyxJQUFqRCxDQUFzRCxLQUF0RDtJQUQ0QyxDQUE5QztJQUdBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBO01BRTNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQXpCLEdBQWlDO01BQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQXpCLENBQXFDO1FBQUMsS0FBQSxFQUFPLENBQUMsVUFBQSxDQUFXLE9BQVgsQ0FBRCxDQUFSO1FBQStCLE9BQUEsRUFBUyxFQUF4QztPQUFyQztNQUVBLE1BQUEsQ0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUF6QixDQUFBLENBQVAsQ0FBZ0QsQ0FBQyxJQUFqRCxDQUFzRCxJQUF0RDtNQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQix1QkFBaEIsRUFBeUMsS0FBekM7TUFDQSxNQUFBLENBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsYUFBekIsQ0FBQSxDQUFQLENBQWdELENBQUMsSUFBakQsQ0FBc0QsS0FBdEQ7TUFDQSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsdUJBQWhCLEVBQXlDLElBQXpDO2FBQ0EsTUFBQSxDQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQXpCLENBQUEsQ0FBUCxDQUFnRCxDQUFDLElBQWpELENBQXNELElBQXREO0lBVDJCLENBQTdCO1dBVUEsUUFBQSxDQUFTLHVCQUFULEVBQWtDLFNBQUE7YUFDaEMsRUFBQSxDQUFHLG1CQUFILEVBQXdCLFNBQUE7QUFDdEIsWUFBQTtRQUFBLFdBQVcsQ0FBQyxLQUFaLEdBQW9CO1FBQ3BCLFFBQUEsR0FBVyxDQUFDLFVBQUEsQ0FBVyxPQUFYLENBQUQsRUFBc0IsVUFBQSxDQUFXLFNBQVgsQ0FBdEI7UUFDWCxXQUFXLENBQUMsV0FBWixDQUF3QjtVQUFDLEtBQUEsRUFBTyxRQUFSO1VBQWtCLE9BQUEsRUFBUyxFQUEzQjtTQUF4QjtRQUNBLE1BQUEsQ0FBTyxXQUFXLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxNQUE5QyxDQUFxRCxDQUFDLElBQXRELENBQTJELENBQTNEO1FBQ0EsTUFBQSxDQUFPLFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVyxDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxNQUE1RCxDQUFtRSxDQUFDLElBQXBFLENBQXlFLENBQXpFO1FBQ0EsV0FBVyxDQUFDLFdBQVosQ0FBd0I7VUFBQyxLQUFBLEVBQU8sRUFBUjtVQUFZLE9BQUEsRUFBUyxRQUFyQjtTQUF4QjtRQUNBLE1BQUEsQ0FBTyxXQUFXLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxNQUE5QyxDQUFxRCxDQUFDLElBQXRELENBQTJELENBQTNEO1FBQ0EsTUFBQSxDQUFPLFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVyxDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxNQUE1RCxDQUFtRSxDQUFDLElBQXBFLENBQXlFLENBQXpFO1FBQ0EsV0FBVyxDQUFDLFdBQVosQ0FBd0I7VUFBQyxLQUFBLEVBQU8sUUFBUjtVQUFrQixPQUFBLEVBQVMsRUFBM0I7U0FBeEI7UUFDQSxNQUFBLENBQU8sV0FBVyxDQUFDLGVBQWUsQ0FBQyxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsVUFBVSxDQUFDLE1BQTVELENBQW1FLENBQUMsSUFBcEUsQ0FBeUUsQ0FBekU7UUFDQSxXQUFXLENBQUMsY0FBWixDQUEyQixRQUEzQjtRQUNBLE1BQUEsQ0FBTyxXQUFXLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxNQUE5QyxDQUFxRCxDQUFDLElBQXRELENBQTJELENBQTNEO2VBQ0EsTUFBQSxDQUFPLFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVyxDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxNQUE1RCxDQUFtRSxDQUFDLElBQXBFLENBQXlFLENBQXpFO01BYnNCLENBQXhCO0lBRGdDLENBQWxDO0VBM0JzQixDQUF4QjtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZGVzY3JpYmUgJ0JvdHRvbVBhbmVsJywgLT5cbiAgQm90dG9tUGFuZWwgPSByZXF1aXJlKCcuLi8uLi9saWIvdWkvYm90dG9tLXBhbmVsJylcbiAgbGludGVyID0gbnVsbFxuICBib3R0b21QYW5lbCA9IG51bGxcbiAgYmVmb3JlRWFjaCAtPlxuICAgIHdhaXRzRm9yUHJvbWlzZSAtPlxuICAgICAgYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2xpbnRlcicpLnRoZW4gLT5cbiAgICAgICAgbGludGVyID0gYXRvbS5wYWNrYWdlcy5nZXRBY3RpdmVQYWNrYWdlKCdsaW50ZXInKS5tYWluTW9kdWxlLmluc3RhbmNlXG4gICAgICAgIGJvdHRvbVBhbmVsPy5kaXNwb3NlKClcbiAgICAgICAgYm90dG9tUGFuZWwgPSBuZXcgQm90dG9tUGFuZWwoJ0ZpbGUnKVxuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKF9fZGlybmFtZSArICcvZml4dHVyZXMvZmlsZS50eHQnKVxuXG4gIHtnZXRNZXNzYWdlfSA9IHJlcXVpcmUoJy4uL2NvbW1vbicpXG5cbiAgaXQgJ2lzIG5vdCB2aXNpYmxlIHdoZW4gdGhlcmUgYXJlIG5vIGVycm9ycycsIC0+XG4gICAgZXhwZWN0KGxpbnRlci52aWV3cy5ib3R0b21QYW5lbC5nZXRWaXNpYmlsaXR5KCkpLnRvQmUoZmFsc2UpXG5cbiAgaXQgJ2hpZGVzIG9uIGNvbmZpZyBjaGFuZ2UnLCAtPlxuICAgICMgU2V0IHVwIHZpc2liaWxpdHkuXG4gICAgbGludGVyLnZpZXdzLmJvdHRvbVBhbmVsLnNjb3BlID0gJ1Byb2plY3QnXG4gICAgbGludGVyLnZpZXdzLmJvdHRvbVBhbmVsLnNldE1lc3NhZ2VzKHthZGRlZDogW2dldE1lc3NhZ2UoJ0Vycm9yJyldLCByZW1vdmVkOiBbXX0pXG5cbiAgICBleHBlY3QobGludGVyLnZpZXdzLmJvdHRvbVBhbmVsLmdldFZpc2liaWxpdHkoKSkudG9CZSh0cnVlKVxuICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLnNob3dFcnJvclBhbmVsJywgZmFsc2UpXG4gICAgZXhwZWN0KGxpbnRlci52aWV3cy5ib3R0b21QYW5lbC5nZXRWaXNpYmlsaXR5KCkpLnRvQmUoZmFsc2UpXG4gICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXIuc2hvd0Vycm9yUGFuZWwnLCB0cnVlKVxuICAgIGV4cGVjdChsaW50ZXIudmlld3MuYm90dG9tUGFuZWwuZ2V0VmlzaWJpbGl0eSgpKS50b0JlKHRydWUpXG4gIGRlc2NyaWJlICd7c2V0LCByZW1vdmV9TWVzc2FnZXMnLCAtPlxuICAgIGl0ICd3b3JrcyBhcyBleHBlY3RlZCcsIC0+XG4gICAgICBib3R0b21QYW5lbC5zY29wZSA9ICdQcm9qZWN0J1xuICAgICAgbWVzc2FnZXMgPSBbZ2V0TWVzc2FnZSgnRXJyb3InKSwgZ2V0TWVzc2FnZSgnV2FybmluZycpXVxuICAgICAgYm90dG9tUGFuZWwuc2V0TWVzc2FnZXMoe2FkZGVkOiBtZXNzYWdlcywgcmVtb3ZlZDogW119KVxuICAgICAgZXhwZWN0KGJvdHRvbVBhbmVsLm1lc3NhZ2VzRWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCkudG9CZSgxKVxuICAgICAgZXhwZWN0KGJvdHRvbVBhbmVsLm1lc3NhZ2VzRWxlbWVudC5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXMubGVuZ3RoKS50b0JlKDIpXG4gICAgICBib3R0b21QYW5lbC5zZXRNZXNzYWdlcyh7YWRkZWQ6IFtdLCByZW1vdmVkOiBtZXNzYWdlc30pXG4gICAgICBleHBlY3QoYm90dG9tUGFuZWwubWVzc2FnZXNFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoKS50b0JlKDEpXG4gICAgICBleHBlY3QoYm90dG9tUGFuZWwubWVzc2FnZXNFbGVtZW50LmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoMClcbiAgICAgIGJvdHRvbVBhbmVsLnNldE1lc3NhZ2VzKHthZGRlZDogbWVzc2FnZXMsIHJlbW92ZWQ6IFtdfSlcbiAgICAgIGV4cGVjdChib3R0b21QYW5lbC5tZXNzYWdlc0VsZW1lbnQuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzLmxlbmd0aCkudG9CZSgyKVxuICAgICAgYm90dG9tUGFuZWwucmVtb3ZlTWVzc2FnZXMobWVzc2FnZXMpXG4gICAgICBleHBlY3QoYm90dG9tUGFuZWwubWVzc2FnZXNFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoKS50b0JlKDEpXG4gICAgICBleHBlY3QoYm90dG9tUGFuZWwubWVzc2FnZXNFbGVtZW50LmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoMClcbiJdfQ==
