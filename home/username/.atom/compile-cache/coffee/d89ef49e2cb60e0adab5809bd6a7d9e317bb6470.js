(function() {
  describe('editor-linter', function() {
    var EditorLinter, editorLinter, getMessage, ref, textEditor, wait;
    ref = require('./common'), getMessage = ref.getMessage, wait = ref.wait;
    EditorLinter = require('../lib/editor-linter');
    editorLinter = null;
    textEditor = null;
    beforeEach(function() {
      global.setTimeout = require('remote').getGlobal('setTimeout');
      global.setInterval = require('remote').getGlobal('setInterval');
      return waitsForPromise(function() {
        atom.workspace.destroyActivePaneItem();
        return atom.workspace.open(__dirname + '/fixtures/file.txt').then(function() {
          if (editorLinter != null) {
            editorLinter.dispose();
          }
          textEditor = atom.workspace.getActiveTextEditor();
          return editorLinter = new EditorLinter(textEditor);
        });
      });
    });
    describe('::constructor', function() {
      return it("cries when provided argument isn't a TextEditor", function() {
        expect(function() {
          return new EditorLinter;
        }).toThrow();
        expect(function() {
          return new EditorLinter(null);
        }).toThrow();
        return expect(function() {
          return new EditorLinter(55);
        }).toThrow();
      });
    });
    describe('::{add, remove}Message', function() {
      return it('adds/removes decorations from the editor', function() {
        var countDecorations, message;
        countDecorations = textEditor.getDecorations().length;
        editorLinter.underlineIssues = true;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        editorLinter.addMessage(message);
        expect(textEditor.getDecorations().length).toBe(countDecorations + 1);
        editorLinter.deleteMessage(message);
        return expect(textEditor.getDecorations().length).toBe(countDecorations);
      });
    });
    describe('::getMessages', function() {
      return it('returns a set of messages', function() {
        var message, messageSet;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageSet = editorLinter.getMessages();
        editorLinter.addMessage(message);
        expect(messageSet.has(message)).toBe(true);
        editorLinter.deleteMessage(message);
        return expect(messageSet.has(message)).toBe(false);
      });
    });
    describe('::onDidMessage{Add, Change, Delete}', function() {
      return it('notifies us of the changes to messages', function() {
        var message, messageAdd, messageChange, messageRemove;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        messageAdd = jasmine.createSpy('messageAdd');
        messageChange = jasmine.createSpy('messageChange');
        messageRemove = jasmine.createSpy('messageRemove');
        editorLinter.onDidMessageAdd(messageAdd);
        editorLinter.onDidMessageChange(messageChange);
        editorLinter.onDidMessageDelete(messageRemove);
        editorLinter.addMessage(message);
        expect(messageAdd).toHaveBeenCalled();
        expect(messageAdd).toHaveBeenCalledWith(message);
        expect(messageChange).toHaveBeenCalled();
        expect(messageChange.mostRecentCall.args[0].type).toBe('add');
        expect(messageChange.mostRecentCall.args[0].message).toBe(message);
        editorLinter.deleteMessage(message);
        expect(messageRemove).toHaveBeenCalled();
        expect(messageRemove).toHaveBeenCalledWith(message);
        expect(messageChange.mostRecentCall.args[0].type).toBe('delete');
        return expect(messageChange.mostRecentCall.args[0].message).toBe(message);
      });
    });
    describe('::active', function() {
      return it('updates currentFile attribute on the messages', function() {
        var message;
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        editorLinter.addMessage(message);
        expect(message.currentFile).toBe(true);
        editorLinter.active = false;
        expect(message.currentFile).toBe(false);
        editorLinter.deleteMessage(message);
        editorLinter.addMessage(message);
        return expect(message.currentFile).toBe(false);
      });
    });
    describe('::{calculateLineMessages, onDidCalculateLineMessages}', function() {
      return it('works and also ignores', function() {
        var listener, message;
        listener = jasmine.createSpy('onDidCalculateLineMessages');
        message = getMessage('Hey!', __dirname + '/fixtures/file.txt', [[0, 1], [0, 2]]);
        editorLinter.addMessage(message);
        editorLinter.onDidCalculateLineMessages(listener);
        atom.config.set('linter.showErrorTabLine', true);
        expect(editorLinter.calculateLineMessages(0)).toBe(1);
        expect(editorLinter.countLineMessages).toBe(1);
        expect(listener).toHaveBeenCalledWith(1);
        atom.config.set('linter.showErrorTabLine', false);
        expect(editorLinter.calculateLineMessages(0)).toBe(0);
        expect(editorLinter.countLineMessages).toBe(0);
        expect(listener).toHaveBeenCalledWith(0);
        atom.config.set('linter.showErrorTabLine', true);
        expect(editorLinter.calculateLineMessages(0)).toBe(1);
        expect(editorLinter.countLineMessages).toBe(1);
        return expect(listener).toHaveBeenCalledWith(1);
      });
    });
    describe('::{handle, add, remove}Gutter', function() {
      return it('handles the attachment and detachment of gutter to text editor', function() {
        editorLinter.gutterEnabled = false;
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.gutterEnabled = true;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.gutterEnabled = false;
        editorLinter.handleGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.addGutter();
        expect(editorLinter.gutter === null).toBe(false);
        editorLinter.removeGutter();
        expect(editorLinter.gutter === null).toBe(true);
        editorLinter.removeGutter();
        return expect(editorLinter.gutter === null).toBe(true);
      });
    });
    describe('::onShouldLint', function() {
      it('is triggered on save', function() {
        var timesTriggered;
        timesTriggered = 0;
        editorLinter.onShouldLint(function() {
          return timesTriggered++;
        });
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        textEditor.save();
        return expect(timesTriggered).toBe(5);
      });
      return it('respects lintOnFlyInterval config', function() {
        var flyStatus, timeCalled, timeDid;
        timeCalled = null;
        flyStatus = null;
        atom.config.set('linter.lintOnFlyInterval', 300);
        editorLinter.onShouldLint(function(fly) {
          flyStatus = fly;
          return timeCalled = new Date();
        });
        timeDid = new Date();
        editorLinter.editor.insertText("Hey\n");
        return waitsForPromise(function() {
          return wait(300).then(function() {
            expect(timeCalled !== null).toBe(true);
            expect(flyStatus !== null).toBe(true);
            expect(flyStatus).toBe(true);
            expect(timeCalled - timeDid).toBeLessThan(400);
            atom.config.set('linter.lintOnFlyInterval', 600);
            timeCalled = null;
            flyStatus = null;
            timeDid = new Date();
            editorLinter.editor.insertText("Hey\n");
            return wait(600);
          }).then(function() {
            expect(timeCalled !== null).toBe(true);
            expect(flyStatus !== null).toBe(true);
            expect(flyStatus).toBe(true);
            expect(timeCalled - timeDid).toBeGreaterThan(599);
            return expect(timeCalled - timeDid).toBeLessThan(700);
          });
        });
      });
    });
    return describe('::onDidDestroy', function() {
      return it('is called when TextEditor is destroyed', function() {
        var didDestroy;
        didDestroy = false;
        editorLinter.onDidDestroy(function() {
          return didDestroy = true;
        });
        textEditor.destroy();
        return expect(didDestroy).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
